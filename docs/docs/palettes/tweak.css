:root {
  --fa-sliders-simple: '\f1de';
}

.core-column {
  position: relative;

  > wa-dropdown {
    min-width: 100%;
  }
}

wa-dropdown > .color.swatch {
  cursor: pointer;
}

.decorated-slider {
  display: grid;
  grid-template-columns: auto 1fr auto;
  margin-block-end: var(--wa-space-xl);

  wa-slider {
    grid-column: 1 / -1;
    --track-height: 1em;
    --track-color-inactive: transparent;
    --track-color-active: transparent;
    --thumb-color: var(--color-tweaked, var(--color));
    --thumb-shadow: 0 0 0 var(--thumb-gap) var(--wa-color-surface-default),
      var(--wa-shadow-offset-x-m) var(--wa-shadow-offset-y-m) var(--wa-shadow-blur-m)
        calc(var(--wa-shadow-offset-x-m) * -1 + var(--thumb-gap)) var(--wa-color-shadow);

    &:active {
      --thumb-size: 2em;
    }

    &::part(base) {
      background: linear-gradient(to right in var(--color-interpolation-space, oklab), var(--color-1), var(--color-2));
    }
  }

  [slot='label'] {
    min-height: 1.1lh;
  }

  .clear-button {
    vertical-align: middle;
    font-size: var(--wa-font-size-xs);

    &:not(.tweaked *) {
      display: none;
    }
  }

  .label-min,
  .label-max {
    font-size: var(--wa-font-size-xs);
  }

  .label-min {
    grid-column: 1;
    margin-inline-start: 0.15em;
  }

  .label-max {
    grid-column: 3;
    margin-inline-end: 0.1em;
  }
}

.hue-shift-slider {
  --color-1: oklch(from var(--color) l c calc(h + var(--min, 0)));
  --color-2: oklch(from var(--color) l c calc(h + var(--max, 0)));
  --color-interpolation-space: oklch;
}

.chroma-scale-slider {
  --color: var(--wa-color-brand);
  --color-1: oklch(from var(--color) l calc(c * var(--min)) h);
  --color-2: oklch(from var(--color) l calc(c * var(--max)) h);
}

.gray-chroma-slider {
  --color: var(--wa-color-gray);
  --color-1: oklch(from var(--wa-color-gray) l 0 none);
  --color-2: oklch(from var(--color-gray-undertone) l calc(c * var(--max)) h);
  margin-top: var(--wa-space-m);
}

.popup {
  background: var(--wa-color-surface-default);
  border: 1px solid var(--wa-color-surface-border);
  padding: var(--wa-space-xl);
  border-radius: var(--wa-border-radius-m);

  code {
    white-space: nowrap;
  }
}

.color-scale {
  th {
    white-space: nowrap;
  }

  td:not([data-hue='gray'] *) {
    --tweak-c: calc(c * var(--chroma-scale, 1));
    --tweak-h: calc(h + var(--hue-shift, 0));

    --color-tweaked-no-chroma-scale: oklch(from var(--color) l c var(--tweak-h));
    --color-tweaked-no-hue-shift: oklch(from var(--color) l var(--tweak-c) h);

    &:is([data-tint='90'], [data-tint='95']) {
      /* Work around  https://bugs.webkit.org/show_bug.cgi?id=287637 */

      --color-tweaked-no-chroma-scale: lch(from var(--color) l c var(--tweak-h));
      --color-tweaked-no-hue-shift: lch(from var(--color) l var(--tweak-c) h);

      /* outline: 1px dashed red; */
    }
  }

  .color.swatch {
    --color-2: var(--color-tweaked);
    --color-2-height: 100%;

    &:is(.tweaking *) {
      --color-2-height: 70%;
    }

    &:is(.tweaking-chroma *) {
      --color: var(--color-tweaked-no-chroma-scale);
    }

    &:is(.tweaking-hue *) {
      --color: var(--color-tweaked-no-hue-shift);
    }

    &:is(.tweaking-gray-chroma *) {
      --color: var(--color-tweaked-no-gray-chroma);
    }
  }

  .tweak-icon {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    right: var(--wa-space-s);
    opacity: var(--tweak-icon-opacity, 0%);
  }

  .core-column:hover {
    --tweak-icon-opacity: 40%;
  }

  &.tweaked .core-column {
    --tweak-icon-opacity: 80%;
  }
}

.tweaked-callout {
  padding: var(--wa-space-xs);
  padding-inline-start: var(--wa-space-m);
  align-items: center;

  &:not(.tweaked-any *) {
    visibility: hidden;
  }

  &::part(message) {
    display: flex;
    align-items: center;
    gap: var(--wa-space-xs);
  }

  wa-button:first-of-type {
    margin-inline-start: auto;
  }
}

/* Better UI before Vue initializes */
[v-if='saved'],
[v-if^='tweaked'] {
  display: none;
}

.core-color {
  wa-radio-button::part(base) {
    width: 2em;
    height: 2em;
    padding: 0;
    border-radius: var(--wa-border-radius-circle);
    background: var(--color);
    background-clip: border-box;
  }

  wa-radio-button:is([checked], :state(checked))::part(base) {
    box-shadow:
      inset 0 0 0 var(--indicator-width) var(--indicator-color),
      inset 0 0 0 calc(var(--indicator-width) + 1.5px) var(--wa-color-surface-default);
  }

  &::part(form-control-input) {
    gap: var(--wa-space-xs);
  }
}
