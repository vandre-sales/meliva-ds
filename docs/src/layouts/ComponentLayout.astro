---
import { getComponentFromFileName } from "../js/cem.js"
import { marked } from 'marked';
import { highlight } from "../utilities/prism";

const { file, frontmatter } = Astro.props
const { version, npmdir, cdndir } = frontmatter

const component = getComponentFromFileName(file)

function rootUrl(url) {
  return "/" + url
}

function variantToBadge() {
  if (component.status === 'stable') {
    return 'brand'
  }

  if (component.status === 'experimental') {
    return 'warning'
  }

  if (component.status == 'planned') {
    return 'neutral'
  }

  if (component.status == 'deprecated') {
    return 'danger'
  }

  return 'neutral'
}


function capitalCase (str: string) {
  return str.split(/\s+/).map((str) => str[0].toUpperCase() + str.slice(1)).join(" ")
}

function classNameToComponentName (className: string) {
  let name = capitalCase(className.replace(/^Wa/, ''));
  if (name === 'Qr Code') name = 'QR Code'; // manual override
  return name;
}

const componentSummary = marked.parse(component.summary);

const {
  hasSlots,
  hasProperties,
  hasEvents,
  hasMethods,
  hasCssProperties,
  hasCssParts,
  hasAnimations,
  hasDependencies,
} = component
---

<header class="component-header">
  <div class="component-header__tag">
    <code>&lt;{ component.tagName }&gt; | { component.name }</code>
  </div>

  <div class="component-header__info">
    <wa-badge variant="neutral" pill>
      Since {component.since || '?' }
    </wa-badge>
    <wa-badge variant={variantToBadge()} pill style="text-transform: capitalize;">
      {component.status}
    </wa-badge>
  </div>
</header>

<p class="component-summary" set:html={componentSummary}></p>

<slot />

{/* Importing */}
<h2 id="importing">Importing</h2>
<p>
  If you're using the autoloader or the traditional loader, you can ignore this section. Otherwise, feel free to use
  any of the following snippets to <a href="/getting-started/installation#cherry-picking">cherry pick</a> this component.
</p>

<wa-tab-group>
  <wa-tab slot="nav" panel="script">Script</wa-tab>
  <wa-tab slot="nav" panel="import">Import</wa-tab>
  <wa-tab slot="nav" panel="bundler">Bundler</wa-tab>
  <wa-tab slot="nav" panel="react">React</wa-tab>

  <wa-tab-panel name="script">
    <p>
      To import this component from <a href="https://www.jsdelivr.com/package/npm/@shoelace-style/shoelace">the CDN</a>
      using a script tag:
    </p>
    <div class="code-preview">
      <pre><code id="code-block-importing-script" class="language-html" set:html={highlight("html", `<script type="module" src="https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@${version}/${cdndir}/${component.path}"></script>`)}></code></pre>
      <wa-copy-button from="code-block-importing-script" class="copy-code-button"></wa-copy-button>
    </div>
  </wa-tab-panel>

  <wa-tab-panel name="import">
    <p>
      To import this component from <a href="https://www.jsdelivr.com/package/npm/@shoelace-style/shoelace">the CDN</a>
      using a JavaScript import:
    </p>
    <div class="code-preview">
      <pre><code id="code-block-importing-cdn" class="language-js" set:html={
        highlight("js", `import 'https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@${version}/${cdndir}/${component.path}';`)
      }></code></pre>
      <wa-copy-button from="code-block-importing-cdn" class="copy-code-button"></wa-copy-button>
    </div>
  </wa-tab-panel>

  <wa-tab-panel name="bundler">
    <p>
      To import this component using <a href={ rootUrl('/getting-started/installation#bundling') }>a bundler</a>:
    </p>
    <div class="code-preview">
      <pre><code id="code-block-importing-bundler" class="language-js" set:html={highlight("js", `import '@shoelace-style/shoelace/${npmdir}/${component.path}';`)}></code></pre>
      <wa-copy-button from="code-block-importing-bundler" class="copy-code-button"></wa-copy-button>
    </div>
  </wa-tab-panel>

  <wa-tab-panel name="react">
    <p>
      To import this component as a <a href="/frameworks/react">React component</a>:
    </p>
    <div class="code-preview">
      <pre><code id="code-block-importing-react" class="language-js" set:html={highlight("js", `import ${component.name} from '@shoelace-style/shoelace/${npmdir}/react/${component.tagNameWithoutPrefix}';`)}></code></pre>
      <wa-copy-button from="code-block-importing-react" class="copy-code-button"></wa-copy-button>
    </div>
  </wa-tab-panel>
</wa-tab-group>

{/* Slots */}
{!hasSlots ? "" :
  <>
    <h2 id="slots">Slots</h2>

    <div class="table-scroll">
      <table>
        <thead>
          <tr>
            <th class="table-name">Name</th>
            <th class="table-description">Description</th>
          </tr>
        </thead>
        <tbody>
          {component.slots.map((slot) => {
            return (
              <tr>
                <td class="nowrap">
                  {slot.name ? <code>{ slot.name }</code> : "(default)"}
                </td>
                <td>{slot.description}</td>
              </tr>
            )
          })}
        </tbody>
      </table>
    </div>

    <p><em>Learn more about <a href="{ rootUrl('/getting-started/usage#slots') }">using slots</a>.</em></p>
  </>
}

{/* Properties */}
{!hasProperties ? "" :
  <>
    <h2 id="properties">Properties</h2>

    <div class="table-scroll">
      <table>
        <thead>
          <tr>
            <th class="table-name">Name</th>
            <th class="table-description">Description</th>
            <th class="table-reflects">Reflects</th>
            <th class="table-type">Type</th>
            <th class="table-default">Default</th>
          </tr>
        </thead>
        <tbody>
          {component.properties.map((prop) => {
            return (
              <tr>
                <td>
                  <code class="nowrap">{ prop.name }</code>
                  {prop.attribute?.length <= 0 ? "" :
                    { prop.attribute == prop.name ? "" :
                      <br>
                      <wa-tooltip content="This attribute is different from its property">
                        <small>
                          <code class="nowrap">
                            { prop.attribute }
                          </code>
                        </small>
                      </wa-tooltip>
                    }
                  }
                </td>
                <td>
                  { prop.description }
                </td>
                <td style="text-align: center;">
                  {prop.reflects ? <wa-icon label="yes" name="check" variant="solid"></wa-icon> : ""}
                </td>
                <td>
                  {prop.type?.text ? <code>{prop.type.text}</code> : "-"}
                </td>
                <td>
                  {prop.default ? <code>{ prop.default }</code> : "-"}
                </td>
              </tr>
            )
          })}
          <tr>
            <td class="nowrap"><code>updateComplete</code></td>
            <td>
              A read-only promise that resolves when the component has
              <a href="/getting-started/usage?#component-rendering-and-updating">finished updating</a>.
            </td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
        </tbody>
      </table>
    </div>

    <p><em>Learn more about <a href={ rootUrl('/getting-started/usage#attributes-and-properties') }>attributes and properties</a>.</em></p>
  </>
}

{/** Events */}
{!hasEvents ? "" :
  <>
    <h2 id="events">Events</h2>

    <div class="table-scroll">
      <table>
        <thead>
          <tr>
            <th class="table-name" data-flavor="html">Name</th>
            <th class="table-name" data-flavor="react">React Event</th>
            <th class="table-description">Description</th>
            <th class="table-event-detail">Event Detail</th>
          </tr>
        </thead>
        <tbody>
          {component.events.map((event) => {
            return (
              <tr>
                <td data-flavor="html"><code class="nowrap">{ event.name }</code></td>
                <td data-flavor="react"><code class="nowrap">{ event.reactName }</code></td>
                <td>{ event.description }</td>
                <td>
                  {event.type?.text ? <code>{ event.type.text }</code> : "-"}
                </td>
              </tr>
            )
          })}
        </tbody>
      </table>
    </div>

    <p><em>Learn more about <a href={ rootUrl('/getting-started/usage#events') }>events</a>.</em></p>
  </>
}

{/* Methods */}
{!hasMethods ? "" :
  <>
    <h2 id="methods">Methods</h2>

    <div class="table-scroll">
      <table>
        <thead>
          <tr>
            <th class="table-name">Name</th>
            <th class="table-description">Description</th>
            <th class="table-arguments">Arguments</th>
          </tr>
        </thead>
        <tbody>
          {component.methods.map((method) => {
            return (
              <tr>
                <td class="nowrap"><code>{ method.name }()</code></td>
                <td>{ method.description }</td>
                <td>
                  {!method.parameters?.length ? "-" :
                    <code>
                      {method.parameters?.map((param, index) => {
                        return <>
                          { param.name }: { param.type?.text }{ index === method.parameters.length - 1 ? "," : "" }
                        </>
                      })}
                    </code>
                  }
                </td>
              </tr>
            )
          })}
        </tbody>
      </table>
    </div>
  </>
  <p><em>Learn more about <a href={ rootUrl('/getting-started/usage#methods') }>methods</a>.</em></p>
}

{/** Custom Properties */}
{!hasCssProperties ? "" :
  <>
    <h2 id="custom-properties">Custom Properties</h2>

    <div class="table-scroll">
      <table>
        <thead>
          <tr>
            <th class="table-name">Name</th>
            <th class="table-description">Description</th>
            <th class="table-default">Default</th>
          </tr>
        </thead>
        <tbody>
          {component.cssProperties.map((cssProperty) => {
            return (
              <tr>
                <td class="nowrap"><code>{ cssProperty.name }</code></td>
                <td>{ cssProperty.description }</td>
                <td>{ cssProperty.default }</td>
              </tr>
              )
          })}
        </tbody>
      </table>
    </div>

    <p><em>Learn more about <a href={ rootUrl('/getting-started/usage#custom-properties') }>customizing CSS custom properties</a>.</em></p>
  </>
}

{/* CSS Parts */}
{!hasCssParts ? "" :
  <>
    <h2 id="parts">Parts</h2>

    <div class="table-scroll">
      <table>
        <thead>
          <tr>
            <th class="table-name">Name</th>
            <th class="table-description">Description</th>
          </tr>
        </thead>
        <tbody>
          {component.cssParts.map((cssPart) => {
            return (
              <tr>
                <td class="nowrap"><code>{ cssPart.name }</code></td>
                <td>{ cssPart.description }</td>
              </tr>
            )
          })}
        </tbody>
      </table>
    </div>

    <p><em>Learn more about <a href={ rootUrl('/getting-started/customizing/#css-parts') }>customizing CSS parts</a>.</em></p>
  </>
}

{/* Animations */}
{!hasAnimations ? "" :
  <>
    <h2 id="animations">Animations</h2>

    <div class="table-scroll">
      <table>
        <thead>
          <tr>
            <th class="table-name">Name</th>
            <th class="table-description">Description</th>
          </tr>
        </thead>
        <tbody>
          {component.animations.map((animation) => {
            return (
              <tr>
                <td class="nowrap"><code>{ animation.name }</code></td>
                <td>{ animation.description }</td>
              </tr>
            )
          })}
        </tbody>
      </table>
    </div>

    <p><em>Learn more about <a href={ rootUrl('/getting-started/customizing#animations') }>customizing animations</a>.</em></p>
  </>
}

{/* Dependencies */}
{!hasDependencies ? "" :
  <>
    <h2 id="dependencies">Dependencies</h2>

    <p>This component automatically imports the following dependencies.</p>

    <ul>
      {component.dependencies.map((dependency) => <li><code>&lt;{ dependency }&gt;</code></li>)}
    </ul>
  </>
}

