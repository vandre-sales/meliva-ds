/**
 * Generate variants.css
 * To use: node variants.css.js > variants.css
 */
const variants = ['neutral', 'brand', 'success', 'warning', 'danger'];
const roles = ['fill', 'border', 'on'];
const noise = ['loud', 'normal', 'quiet'];
const defaults = {
  neutral: [
    [':host(wa-button)', '.wa-button', 'button', "input[type='button']", "input[type='submit']"],
    [':host(wa-tag)', '.wa-tag'],
  ],
  brand: [
    [':host(wa-callout)', '.wa-callout'],
    [':host(wa-badge)', '.wa-badge'],
  ],
};
const types = roles.map(layer => noise.map(priority => layer + '-' + priority)).flat();

let ret = comment('Do not edit this file directly. It is generated via variants.css.js').trimStart();

ret += comment('Register color properties so that the space toggle hack can work.');

for (let type of types) {
  ret += cssRule(`@property --wa-color-${type}`, [
    `syntax: '<color>';`,
    'inherits: true;',
    'initial-value: transparent;',
  ]);
}

ret += comment(`Element defaults.
   We want these to resolve to inherit when inside a variant, and only be applied when not inside an explicit variant.`);

for (let variant in defaults) {
  let selector = defaults[variant];
  let declarations = types.map(type => `--wa-color-${type}: var(--wa-no-variant, var(--wa-color-${variant}-${type}));`);

  ret += cssRule(selector, declarations);
}

ret += comment('Variants');

for (let variant of variants) {
  let selector = [`.wa-${variant}`, `:host([variant='${variant}'])`];

  if (variant === 'neutral') {
    selector.unshift(':root');
  }

  let declarations = types.map(type => `--wa-color-${type}: var(--wa-color-${variant}-${type});`);
  ret += cssRule(selector, declarations);
}

ret += cssRule([variants.map(variant => `.wa-${variant}`), ':host([variant])'], '--wa-no-variant: /* space toggle */;');

console.log(ret.trimEnd());

function cssRule(selector, declarations) {
  selector = Array.isArray(selector) ? selector.flat().join(',\n') : selector;
  declarations = Array.isArray(declarations) ? declarations.flat().join('\n') : declarations;
  declarations = declarations.replace(/^/gm, '  ');
  return `\n${selector} {\n${declarations}\n}\n`;
}

function comment(text) {
  return ['\n/**', ` * ${text}`, ' */\n'].join('\n');
}
